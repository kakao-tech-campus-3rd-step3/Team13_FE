# GitHub 이슈 생성 시, 상위 Jira 이슈 타입을 자동으로 감지하여
# Epic-Feature, Feature-Task, Task-Sub-task 등 모든 계층 구조를 지원하는 최종 워크플로우

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

jobs:
  gh-issue-to-jira-with-hierarchy:
    runs-on: ubuntu-latest
    steps:
      - name: Jira Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      # 1. 제목에서 상위 이슈 키 추출
      - name: Extract Parent key from title
        id: parent
        shell: bash
        run: |
          TITLE="${{ github.event.issue.title }}"
          PARENT_KEY=$(echo "$TITLE" | grep -oE '^[A-Z][A-Z0-9]+-[0-9]+' | head -n1 || true)
          if [ -z "$PARENT_KEY" ]; then
            echo "❌ Title does not start with a Jira key (e.g., 'KAN-123 ...')."
            exit 1
          fi
          echo "parent_key=$PARENT_KEY" >> $GITHUB_OUTPUT
          echo "Using Parent: $PARENT_KEY"

      # 2. 상위 이슈의 타입과 프로젝트 키를 Jira API로 확인
      - name: Get Parent Issue Info
        id: parent_info
        shell: bash
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          PARENT_KEY: ${{ steps.parent.outputs.parent_key }}
        run: |
          set -e
          BASE="${JIRA_BASE_URL%/}"
          ISSUE_DATA=$(curl -sS -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -H "Accept: application/json" \
            "$BASE/rest/api/3/issue/$PARENT_KEY?fields=issuetype,project")
          PARENT_ISSUE_TYPE=$(echo "$ISSUE_DATA" | jq -r '.fields.issuetype.name')
          PARENT_PROJECT_KEY=$(echo "$ISSUE_DATA" | jq -r '.fields.project.key')
          if [ -z "$PARENT_ISSUE_TYPE" ] || [ "$PARENT_ISSUE_TYPE" == "null" ]; then
            echo "❌ Could not find parent issue type for $PARENT_KEY."
            exit 1
          fi
          echo "parent_issuetype=$PARENT_ISSUE_TYPE" >> $GITHUB_OUTPUT
          echo "parent_project_key=$PARENT_PROJECT_KEY" >> $GITHUB_OUTPUT
          echo "Parent is '$PARENT_ISSUE_TYPE' in project '$PARENT_PROJECT_KEY'"

      # 3. 상위 이슈 타입에 따라 하위 이슈 타입 결정
      - name: Determine Child Issue Type
        id: child_type
        shell: bash
        run: |
          PARENT_TYPE="${{ steps.parent_info.outputs.parent_issuetype }}"
          CHILD_TYPE=""
          if [[ "$PARENT_TYPE" == "Epic" ]]; then CHILD_TYPE="Feature"
          elif [[ "$PARENT_TYPE" == "Feature" || "$PARENT_TYPE" == "스토리" ]]; then CHILD_TYPE="Task"
          elif [[ "$PARENT_TYPE" == "Task" || "$PARENT_TYPE" == "작업" ]]; then CHILD_TYPE="Sub-task"
          else
            echo "❌ Parent issue type '$PARENT_TYPE' cannot have children in this workflow."
            exit 1
          fi
          echo "child_issuetype=$CHILD_TYPE" >> $GITHUB_OUTPUT
          echo "Determined child issue type: $CHILD_TYPE"

      # 4. [수정됨] Sub-task와 일반 이슈를 분리하여 생성
      - name: Create Jira Issue (if not Sub-task)
        if: steps.child_type.outputs.child_issuetype != 'Sub-task'
        id: create_standard
        uses: atlassian/gajira-create@v3
        with:
          project: ${{ steps.parent_info.outputs.parent_project_key }}
          issuetype: ${{ steps.child_type.outputs.child_issuetype }}
          summary: '${{ github.event.issue.title }}'
          description: |
            *GitHub Issue*: ${{ github.event.issue.html_url }}

      - name: Create Jira Sub-task (if Sub-task)
        if: steps.child_type.outputs.child_issuetype == 'Sub-task'
        id: create_subtask
        shell: bash
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          PARENT_KEY: ${{ steps.parent.outputs.parent_key }}
          PROJECT_KEY: ${{ steps.parent_info.outputs.parent_project_key }}
          SUMMARY: '${{ github.event.issue.title }}'
          CHILD_TYPE: ${{ steps.child_type.outputs.child_issuetype }}
        run: |
          set -e
          BASE="${JIRA_BASE_URL%/}"
          # Jira API는 description을 ADF(Atlassian Document Format)로 받음
          # 간단한 텍스트 설명을 위해 JSON 문자열로 이스케이프 처리
          SUMMARY_ESCAPED=$(echo "$SUMMARY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          
          read -r -d '' DATA_TEMPLATE << EOM
          {
            "fields": {
              "parent": { "key": "%s" },
              "project": { "key": "%s" },
              "summary": "%s",
              "issuetype": { "name": "%s" }
            }
          }
          EOM
          DATA=$(printf "$DATA_TEMPLATE" "$PARENT_KEY" "$PROJECT_KEY" "$SUMMARY_ESCAPED" "$CHILD_TYPE")
          
          RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" -X POST --data "$DATA" \
            "$BASE/rest/api/3/issue")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1 | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" -ne 201 ]; then
            echo "::error::Failed to create sub-task. Code: $HTTP_CODE, Body: $BODY"
            exit 1
          fi
          
          NEW_KEY=$(echo "$BODY" | jq -r '.key')
          echo "Created sub-task: $NEW_KEY"
          echo "issue=$NEW_KEY" >> "$GITHUB_OUTPUT"

      - name: Set Created Issue Key
        id: create
        shell: bash
        run: |
          if [ -n "${{ steps.create_standard.outputs.issue }}" ]; then
            echo "issue=${{ steps.create_standard.outputs.issue }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ steps.create_subtask.outputs.issue }}" ]; then
            echo "issue=${{ steps.create_subtask.outputs.issue }}" >> "$GITHUB_OUTPUT"
          fi

      # 5. [수정됨] Sub-task가 아닌 경우에만 부모-자식 연결 실행
      - name: Link to parent issue
        if: steps.child_type.outputs.child_issuetype != 'Sub-task'
        shell: bash
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          CHILD_KEY: ${{ steps.create.outputs.issue }}
          PARENT_KEY: ${{ steps.parent.outputs.parent_key }}
          PARENT_TYPE: ${{ steps.parent_info.outputs.parent_issuetype }}
        run: |
          set -e
          BASE="${JIRA_BASE_URL%/}"
          DATA=""
          if [[ "$PARENT_TYPE" == "Epic" ]]; then
            FIELDS=$(curl -sS -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" -H "Accept: application/json" "$BASE/rest/api/3/field")
            EPIC_LINK_ID=$(echo "$FIELDS" | jq -r '.[] | select(.name=="Epic Link") | .id' | head -n1)
            if [ -z "$EPIC_LINK_ID" ] || [ "$EPIC_LINK_ID" == "null" ]; then
              DATA=$(jq -n --arg pkey "$PARENT_KEY" '{fields: {parent: {key: $pkey}}}')
            else
              DATA=$(jq -n --arg cf "$EPIC_LINK_ID" --arg epic "$PARENT_KEY" '{fields: {}} | .fields[$cf]=$epic')
            fi
          else
            DATA=$(jq -n --arg pkey "$PARENT_KEY" '{fields: {parent: {key: $pkey}}}')
          fi
          CODE=$(curl -sS -w "%{http_code}" -o /tmp/resp.txt \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" -H "Content-Type: application/json" \
            -X PUT "$BASE/rest/api/3/issue/$CHILD_KEY" --data "$DATA")
          if [ "$CODE" -lt 200 ] || [ "$CODE" -ge 300 ]; then
            echo "::error::Failed to link issue. Body: $(cat /tmp/resp.txt)"
            exit 1
          fi
          echo "✅ Successfully linked $CHILD_KEY under $PARENT_KEY"

      # 6. GitHub 이슈에 코멘트 남기기
      - name: Comment back with Jira link
        uses: actions/github-script@v7
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        with:
          script: |
            const issueKey = '${{ steps.create.outputs.issue }}';
            if (!issueKey) {
              console.log('No issue key found to comment back.');
              return;
            }
            const parentKey = '${{ steps.parent.outputs.parent_key }}';
            const childType = '${{ steps.child_type.outputs.child_issuetype }}';
            const base = process.env.JIRA_BASE_URL.replace(/\/$/, '');
            const url  = `${base}/browse/${issueKey}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `Jira **${childType}** created under **${parentKey}** → ${url}`
            });

