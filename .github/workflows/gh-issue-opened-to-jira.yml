on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

jobs:
  gh-issue-to-jira-under-parent:
    runs-on: ubuntu-latest

    steps:
      - name: Jira Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    # 1. 제목 맨 앞에 있는 이슈 키(KAN-456 등)를 상위 이슈로 추출
      - name: Extract Parent key from title
        id: parent
        shell: bash
        run: |
          TITLE="${{ github.event.issue.title }}"
          # 제목이 JIRA 키 패턴으로 시작하는지 확인
          PARENT_KEY=$(echo "$TITLE" | grep -oE '^[A-Z][A-Z0-9]+-[0-9]+' | head -n1 || true)
          
          if [ -z "$PARENT_KEY" ];
          then
            echo "❌ Title does not start with a Jira key (e.g., 'KAN-123 ...')."
            exit 1
          fi
          
          echo "parent_key=$PARENT_KEY" >> $GITHUB_OUTPUT
          echo "Using Parent: $PARENT_KEY"

      # 2. Jira Task 생성 (이전과 동일)
      - name: Create Jira Task
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: KAN
          issuetype: Task
          summary: '${{ github.event.issue.title }}'
          description: |
            *GitHub Issue*: ${{ github.event.issue.html_url }}
            *Author*: ${{ github.event.issue.user.login }}
            ----
            *Issue Body*:
            {{code}}
            ${{ github.event.issue.body }}
            {{code}}

      # 3. 새로 만든 Task를 지정된 상위 이슈(Feature)의 하위로 연결
      - name: Link to parent issue (Feature)
        shell: bash
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          CHILD_KEY: ${{ steps.create.outputs.issue }}
          PARENT_KEY: ${{ steps.parent.outputs.parent_key }}
        run: |
          set -e
          BASE="${JIRA_BASE_URL%/}"

          # Epic Link 대신 일반적인 'parent' 필드를 사용하여 연결합니다.
          # 이 방식은 팀 관리형, 회사 관리형 프로젝트 모두에서 Feature-Task 관계를 설정할 수 있습니다.
          DATA=$(jq -n --arg pkey "$PARENT_KEY" '{fields: {parent: {key: $pkey}}}')

          CODE=$(curl -sS -w "%{http_code}" -o /tmp/resp.txt \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" -H "Content-Type: application/json" \
            -X PUT "$BASE/rest/api/3/issue/$CHILD_KEY" --data "$DATA")
            
          echo "HTTP=$CODE Body=$(cat /tmp/resp.txt)"
          if [ "$CODE" -lt 200 ] || [ "$CODE" -ge 300 ]; then
            echo "Failed to link issue."
            exit 1
          fi
          echo "✅ Successfully linked $CHILD_KEY under $PARENT_KEY"

      # 4. GitHub 이슈에 코멘트 남기기 (이전과 유사)
      - name: Comment back with Jira link
        uses: actions/github-script@v7
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        with:
          script: |
            const issueKey = '${{ steps.create.outputs.issue }}';
            const parentKey = '${{ steps.parent.outputs.parent_key }}';
            const base = process.env.JIRA_BASE_URL.replace(/\/$/, '');
            const url  = `${base}/browse/${issueKey}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `Jira Task created under **${parentKey}** → ${url}`
            });
